@startuml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml

skinparam rectangle<<boundary>> {
    Shadowing false
    StereotypeFontSize 0
    FontColor #444444
    BorderColor #444444
    BorderStyle dashed
    BackgroundColor #FFFFFF
}

package "Development" {
    actor "Разработчик"
    actor "Тестировщик"
    component "Git"
    folder "CD pipeline by ArgoCD"{
        component [ArgoCD]
    }
    folder "Continuous Integration/Continuous Delivery pipeline by werf" {
        component "build"
        component "publish"
        component "test"
        component "release"
        component "prepare release artifacts"
        component "acceptance testing"

        [build] -> [publish]
        [publish] -> [test]
        [test] -> [release]
        [release] -> [prepare release artifacts]
        [prepare release artifacts] -> [acceptance testing]
    }

    [Git] -> [CI pipeline by werf] : "Выкладка изменений"
    [Разработчик] -> [Git] : "Разработка фич"
    [Разработчик] -> [Git] : "Написание модульных тестов"
    [Тестировщик] -> [Git] : "Написание автотестов end-to-end и интеграционных"
    [acceptance testing] -> [CD pipeline by ArgoCD]
}
actor "Девопсер"
[Девопсер] -> [CI pipeline by werf] : "Настройка пайплайна"
[Девопсер] -> [CD pipeline by ArgoCD] : "Настройка пайплайна"
[ArgoCD] --> [Deckhouse Kubernetes Cluster]: "Деплой в продакшн"

package "Deckhouse Kubernetes Cluster" {
    component "Группа узлов" {
        component "Узел" {
            component "Под" {
                [Контейнер]
            }
        }
    }
}

package "Managed Services by Yandex Cloud" {
    [PostgreSQL кластер]
    [Apache Kafka кластер]
}

[Группа узлов] -> [PostgreSQL кластер]
[Группа узлов] -> [Apache Kafka кластер]

package "Артефакты" {
    [ArgoCD] --> [Container Registry]: "Подтянуть изменения"
    [ArgoCD] --> [Настройки конфигурации]: "Получить настройки конфигурации"
}

actor "Системный администратор"
package "Мониторинги" {
    folder "Prometheus Стек" {
    component "Prometheus"
    [Prometheus] --> "Группа узлов" : "Запуллить метрики"
    component "Graphana"
    [Prometheus] --> [Graphana]
    component "Хранилище"
    [Prometheus] --> [Хранилище] : "Cохранить метрики"
    component "Prometheus alert manager"
    component "Email"
    [Prometheus] -> [Prometheus alert manager]
    [Prometheus alert manager] -> [Email]
    [Email] --> [Системный администратор]
    }
    folder "ELK Стек" {
        component "Logstash"
        component "Elasticsearch"
        component "Kibana"

        [Группа узлов] --> [Logstash] : "Отправить данные"
        [Logstash] -> [Elasticsearch]
        [Elasticsearch] -> [Kibana]
    }

    [Системный администратор] ---> [Мониторинги] : "Настраивает мониторинги"
}

actor "Аналитик"
[Аналитик] -> [PostgreSQL кластер] : "Анализирует данные"
[Аналитик] -> [ELK Стек] : "Анализирует данные"

package "Учет задач"{
    component "Jira"
}
[Аналитик] -> [Jira] : "Завести задачу"

[Разработчик] -> [Jira] : "Выбрать задачу для разработки"

@enduml
