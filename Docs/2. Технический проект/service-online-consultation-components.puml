@startuml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml
!include <tupadr3/devicons2/postgresql>

skinparam rectangle<<boundary>> {
    Shadowing false
    StereotypeFontSize 0
    FontColor #444444
    BorderColor #444444
    BorderStyle dashed
    BackgroundColor #FFFFFF
}

AddElementTag("v1.0", $borderColor="#d73027")
AddElementTag("v1.1", $fontColor="#d73027")
AddElementTag("backup", $fontColor="orange")

AddRelTag("backup", $textColor="orange", $lineColor="orange", $lineStyle = DashedLine())

Person(unregisteredUser, "Незарегистрированный пользователь", "Отсутствуют личные данные в системе")
Person(client, "Клиент", "Пользователь, зарегистрированный в системе, способный оформлять запись на онлайн-консультацию")
Person(expert, "Эксперт", "Пользователь, зарегистрированный в системе как специалист в определенной сфере, способный проводить онлайн-консультации")
Person(administrator, "Администратор", "Управление учетными записями, решение жалоб на экспертов/клиентов/отзывы")

System_Boundary(service, "Сервис онлайн-консультаций") {
    Container(apiGateway, "API-gateway", "C++", "Распределяем запросы по разным микросервисами")
    Container(messageBroker, "Брокер сообщений", "RabbitMQ, AMQP", "Маршрутизация сообщений от отправителя к получателю")

    'Клиентские приложения
    Container(clientWebApp, "Клиентский портал", "React", "Веб-интерфейс панели управления для клиента, предоставляющий возможность выбирать и записываться на консультацию к клиенту")
    unregisteredUser --> clientWebApp: "Регистрация нового пользователя в качестве клиента"
    client --> clientWebApp: "Просмотр дорожной обстановки, заказ такси, выбор параметров заказа"
    clientWebApp --> apiGateway : "Использует\n[HTTPS]"

    Container(expertWebApp, "Портал для экспертов", "React", "Веб-интерфейс панели управления для клиента, дающий возможность предоставлять свои услуги, расширять клиентскую базу, управлять расписанием и тарифами.")
    unregisteredUser --> expertWebApp: "Регистрация нового пользователя в качестве эксперта"
    expert --> expertWebApp: "Просмотр дорожной обстановки, принятие заказа"
    expertWebApp --> apiGateway : "Использует\n[HTTPS]"

    Container(adminWebApp, "Портал администратора", "React", "Веб-интерфейс панели управления для работы администратора, предоставляющий весь необходимый контекст для решения задач")
    administrator --> adminWebApp: "Управление учетными записями, решение жалоб на экспертов/клиентов/отзывы"
    adminWebApp --> apiGateway : "Использует\n[HTTPS]"

    'Микросервисы пользователей
    Container(userAuthMicroservice, "Микросервис авторизации пользователей", "C++", "Авторизация пользователей")
    apiGateway --> userAuthMicroservice : "Авторизация пользователя"
    ContainerDb(userAuthMicroserviceDB, "База данных микросервиса авторизации пользователей", "MySQL", "Хранит и управляет информацией, связанной с авторизацией о пользователе", $sprite="mysql")
    userAuthMicroservice --> userAuthMicroserviceDB : "Прочитать/Записать информацию"

    'пользователи
    Container(userMicroservice, "Микросервис пользователей", "C++", "Редактирование пользователем информации в своем аккаунте")
    apiGateway --> userMicroservice : "Работа с аккаунтом клиента/эксперта"
    ContainerDb(userMicroserviceDB, "База данных микросервиса пользователя", "MySQL", "Сохраняет информацию о пользователе", $sprite="mysql")
    userMicroservice --> userMicroserviceDB : "Прочитать/Записать информацию"

    'Стоимость консультации
    rectangle "==Микросервис расчета цены" <<boundary>> as priceMicroservice {
        rectangle "==API Layer" <<boundary>> as priceAPILayer {
            Container(priceConsumer, "Консьюмер цены", "RabbitMQ Consumer", "Обрабатывает Message из RabbitMQ")
            Container(apiPriceController, "Контроллер api цены", "Web API Controller", "Обрабатывает HTTP запросы, извлекает параметры из них")
        }
        rectangle "==Application Layer" <<boundary>> as priceApplicationLayer {
            rectangle "==Commands" <<boundary>> as priceCommands {
                Container(editPriceCommand, "EditPriceCommand", "", "Изменение текущей цены на консультацию")
            }
            rectangle "==Queries" <<boundary>> as priceQueries {
                Container(getPriceQuery, "GetPriceQuery", "", "Просмотреть текущую цену на консультацию")
            }
        }
        priceAPILayer --> priceApplicationLayer : "Использует"
        rectangle "==Domain Layer" <<boundary>> as priceDomainLayer {
            Container(priceAggregate, "Цена", "Aggregate", "Цена за поездку")
        }
        priceCommands --> priceDomainLayer : "Использует"
        rectangle "==Infrastructure Layer" <<boundary>> as priceInfrastructureLayer {
            Container(priceRepository, "Репозиторий цены", "", "Сохранение/восстановление аггрегата")
        }
        priceCommands --> priceInfrastructureLayer : "Использует"
    }
    apiGateway --> apiPriceController

    'Расписание консультаций
    Container(scheduleMicroservice, "Микросервис расписания консультаций", "C++", "Отображает актуальное расписание консультаций")
    apiGateway --> scheduleMicroservice : "Обновить расписание"
    ContainerDb(scheduleMicroserviceDB, "База данных микросервиса расписания консультаций", "MySQL", "Изменяет и хранит актуальное расписание консультаций", $sprite="mysql")
    scheduleMicroservice --> scheduleMicroserviceDB : "Прочитать/Записать информацию о расписании консультаций, изменить статус сеанса"

    'Саппорт
    Container(supportMicroservice, "Микросервис поддержки", "C++", "Отвечает за обработку обращений клиентов и экспертов и предоставление поддержки по различным вопросам.")
    apiGateway --> supportMicroservice : "Работа с обращениями"
    ContainerDb(supportMicroserviceDB, "База данных микросервиса поддержки", "MySQL", "Информация обо всех обращениях в техническую поддержку, отчетах водителей о них и их автомобилях", $sprite="mysql")
    supportMicroservice --> supportMicroserviceDB : "Прочитать/Записать информацию"

    'Запись на консультацию
    Container(ordersMicroservice, "Микросервис заказов", "C++", "Отвечает за обработку и управление записями клиентом на консультацию у определенному эксперту")
    apiGateway --> ordersMicroservice : "Записаться на консультацию"
    ContainerDb(orderMicroserviceDB, "База данных микросервиса заказов", "MySQL", "", $sprite="mysql")
    ordersMicroservice --> orderMicroserviceDB : "Прочитать/Записать информацию"

    'Оплата заказа
    Container(bankingMicroservice, "Микросервис оплаты", "C++", "Обеспечение поступления денежных средств за осуществленные консультации от клиентов к экспертам")
    apiGateway --> bankingMicroservice
    ContainerDb(bankingMicroserviceDb, "База данных микросервиса оплаты", "MySQL", $sprite="mysql")
    bankingMicroservice --> bankingMicroserviceDb : "Прочитать/Записать информацию"

    Container(bankingNotificationMicroservice, "Микросервис уведомления об оплате", "C++", "Уведомление участников оплаты о ее статусе")
    apiGateway --> bankingNotificationMicroservice
    ContainerDb(bankingNotificationMicroserviceDb, "База данных микросервиса уведомления об оплате", "mysql" )
    bankingNotificationMicroservice --> bankingNotificationMicroserviceDb : "Прочитать/Записать информацию"

    'Отзывы и рейтинг
    Container(ratingAndFeedbackMicroservice, "Микросервис рейтинга и отзывов", "C++", "Отвечает за отправку и изменение клиентами и экспертами рейтингов и отзывов друг о друге.")
    apiGateway --> ratingAndFeedbackMicroservice : "Работа с рейтингом и отзывами"
    ContainerDb(ratingAndFeedbackMicroserviceDB, "База данных микросервиса рейтингов и отзывов", "MySQL", "Изменяет информацию о рейтинге пользователя и актуализирует отзывы", $sprite="mysql")
    ratingAndFeedbackMicroservice --> ratingAndFeedbackMicroserviceDB : "Прочитать/Записать информацию"

    'Сессия
    Container(sessionMicroservice, "Микросервис сессий", "C++", "Отвечает за создание и удаление сессии для консультации")
    apiGateway --> sessionMicroservice : "Работа с сессией"
    ContainerDb(sessionMicroserviceDB, "База данных микросервиса сессий", "MySQL", "Создает и обрабатывает сессию для консультации", $sprite="mysql")
    sessionMicroservice --> sessionMicroserviceDB : "Прочитать/Записать информацию"

    'Аналитика
    Container(analyticsAndReportingMicroservice, "Микросервис аналитики и отчетности", "C++", "Отвечает за сбор и анализ данных о пройденных консультациях, платежах и других ключевых метриках приложения")
    apiGateway --> analyticsAndReportingMicroservice : "Работа с аналитической информацией"
    ContainerDb(analyticsAndReportingMicroserviceDB, "База данных микросервиса аналитики и отчетности", "Greenplum", "")
    analyticsAndReportingMicroservice ---> analyticsAndReportingMicroserviceDB : "Прочитать/Записать информацию"
    analyticsAndReportingMicroservice --> supportMicroservice : "Собрать данные раз в день для выгрузки в аналитическую БД\n[gRPC]"
    analyticsAndReportingMicroservice --> ordersMicroservice : "Собрать данные раз в день для выгрузки в аналитическую БД\n[gRPC]"
    analyticsAndReportingMicroservice --> bankingMicroservice : "Собрать данные раз в день для выгрузки в аналитическую БД\n[gRPC]"

    ordersMicroservice --> priceMicroservice : "Рассчитать стоимость заказа\n[gRPC]"

    ordersMicroservice ---> messageBroker : "Какие сессии на консультацию сейчас доступны"
    messageBroker ---> scheduleMicroservice: "Какие сессии на консультацию сейчас доступны"
    messageBroker ---> ordersMicroservice : "Доступные сессии"

    ordersMicroservice ---> messageBroker : "Какая стоимость консультации"
    messageBroker ---> scheduleMicroservice: "Какая стоимость консультации"
    messageBroker ---> ordersMicroservice : "Текущая стоимость консультации"

    ordersMicroservice ---> messageBroker : "Провести платеж"
    messageBroker ---> bankingMicroservice : "Провести платеж"
    messageBroker ---> ordersMicroservice : "Платеж проведен"
    messageBroker ---> bankingNotificationMicroservice : "Уведомить о проведении платежа"

    scheduleMicroservice ---> messageBroker : "Какой статус сессий"
    messageBroker ---> sessionMicroservice: "Какой статус сессий"
    messageBroker ---> scheduleMicroservice : "Актуальный статус всех сессий"

    userMicroservice ---> messageBroker : "Узнать отзывы и рейтинг"
    messageBroker ---> ratingAndFeedbackMicroservice : "Получить отзывы и рейтинг"
    messageBroker ---> userMicroservice : "Список отзывов и рейтинг"
}

Container_Ext(bankingSystemExt, "Проведение банковских платежей")
bankingMicroservice --> bankingSystemExt : "Провести оплату"

SHOW_LEGEND()
@enduml
