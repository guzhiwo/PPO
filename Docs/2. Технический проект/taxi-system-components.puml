@startuml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml
!include <tupadr3/devicons2/postgresql>

skinparam rectangle<<boundary>> {
    Shadowing false
    StereotypeFontSize 0
    FontColor #444444
    BorderColor #444444
    BorderStyle dashed
    BackgroundColor #FFFFFF
}

AddElementTag("v1.0", $borderColor="#d73027")
AddElementTag("v1.1", $fontColor="#d73027")
AddElementTag("backup", $fontColor="orange")

AddRelTag("backup", $textColor="orange", $lineColor="orange", $lineStyle = DashedLine())

Person(unregisteredUser, "Незарегистрированный пользователь", "Отсутствуют личные данные в системе")
Person(client, "Клиент", "Пользователь, зарегистрированный в системе, способный совершать заказы")
Person(driver, "Водитель", "Пользователь, зарегистрированнный в системе вместе с автомобилем, способный выполнять заказы")
Person(administrator, "Администратор", "Управление учетными записями, формирование отчетов, решение жалоб")

System_Boundary(taxiService, "Сервис заказа такси") {
    Container(apiGateway, "API-gateway", "C++", "Распределяем запросы между мобильными клиентами и веб-клиентами по разным микросервисам")

    Container(clientMobileApp, "Мобильное кроссплатформенное приложение клиента", "Flutter", "Мобильное приложение клиента для заказа такси")
    unregisteredUser --> clientMobileApp: "Регистрация нового пользователя в качестве клиента"
    client --> clientMobileApp: "Просмотр дорожной обстановки, заказ такси, выбор параметров заказа"
    clientMobileApp -> apiGateway : "Использует\n[HTTPS]"

    Container(driverMobileApp, "Мобильное кроссплатформенное приложение водителя", "Flutter", "Мобильное приложение клиента для выполнения заказа такси")
    unregisteredUser --> driverMobileApp: "Регистрация нового пользователя в качестве водителя"
    driver --> driverMobileApp: "Просмотр дорожной обстановки, принятие заказа"
    driverMobileApp -> apiGateway : "Использует\n[HTTPS]"

    Container(adminSpa, "Адмниская SPA", "React", "Веб-интерфейс панели управления для работы администратора, предоставляющий весь необходимый контекст для решения задач")
    administrator --> adminSpa: "Решение конфликтов, создание отчетов, проверка водителей"
    adminSpa --> apiGateway : "Использует\n[HTTPS]"

    Container(navigationMicroservices, "Микросервисы для навигации", "C++", "Позволяют строить маршрут, просчитывать время и загруженность дорог, критерии оптимальности маршрута, дорожную обстановку")
    apiGateway --> navigationMicroservices : ""

    Container(tariffsMicroservice, "Микросервис тарифов", "C++", "Содержит информацию о доступных тарифах по региону")
    apiGateway --> tariffsMicroservice : ""
    ContainerDb(tariffsMicroserviceDB, "База данных микросервиса тарифов", "PostgreSQL", "", $sprite="postgresql")
    tariffsMicroservice ---> tariffsMicroserviceDB : "Прочитать/Записать информацию"


    rectangle "==Микросервис расчета цены" <<boundary>> as priceMicroservice {
        rectangle "==API Layer" <<boundary>> as priceAPILayer {
            Container(priceConsumer, "Консюмер цены", "RabbitMQ Consumer", "Обрабатывает Message из RabbitMQ")
            Container(apiPriceController, "Контроллер api цены", "Web API Controller", "Обрабатывает HTTP запросы, извлекает параметры из них")
        }
        rectangle "==Application Layer" <<boundary>> as priceApplicationLayer {
            rectangle "==Commands" <<boundary>> as priceCommands {
                Container(editPriceCommand, "EditPriceCommand", "", "Изменение текущей цены на поездку")
            }
            rectangle "==Queries" <<boundary>> as priceQueries {
                Container(getPriceQuery, "GetPriceQuery", "", "Просмотреть текущую цену на поездку")
            }
        }
        priceAPILayer --> priceApplicationLayer : "Использует"
        rectangle "==Domain Layer" <<boundary>> as priceDomainLayer {
            Container(priceAggregate, "Цена", "Aggregate", "Цена за поездку")
        }
        priceCommands --> priceDomainLayer : "Использует"
        rectangle "==Infrastructure Layer" <<boundary>> as priceInfrastructureLayer {
            Container(priceRepository, "Репозиторий цены", "", "Сохранение/восстановление аггрегата")
        }
        priceCommands --> priceInfrastructureLayer : "Использует"
    }
    apiGateway --> apiPriceController : ""

    ContainerDb(priceMicroserviceDB, "База данных микросервис расчета цены", "PostgreSQL", "", $sprite="postgresql")
    priceInfrastructureLayer --> priceMicroserviceDB : "Прочитать/Записать информацию"


    Container(weatherMicroservice, "Микросервис погоды", "C++", "Предоставляет доступ к информации о погоде")
    apiPriceController ---> weatherMicroservice : "Узнать погоду\n[gRPC]"

    Container(matchmakingMicroservice, "Микросервис подбора машины", "C++", "Подбирает машину в зависимости от рейтинга и сложности заказа")
    apiGateway --> matchmakingMicroservice : ""
    ContainerDb(matchmakingMicroserviceDB, "База данных микросервиса подбора машины", "PostgreSQL", "", $sprite="postgresql")
    matchmakingMicroservice --> matchmakingMicroserviceDB : "Прочитать/Записать информацию"


    Container(routeStopPointSelectorMicroservice, "Микросервис выбора точки остановки маршрута", "C++", "На основании предыдущих заказов вычисляет оптимальные точки остановки")
    apiGateway --> routeStopPointSelectorMicroservice : ""
    ContainerDb(routeStopPointSelectorMicroserviceDB, "Аналитическая база данных микросервиса выбора точки остановки маршрута", "Greenplum", "Аналитическая информация, содержащая в себе все когда-либо выбранные точки остановки маршрутов и их оценку релевантности", $sprite="postgresql")
    routeStopPointSelectorMicroservice --> routeStopPointSelectorMicroserviceDB : "Прочитать/Записать информацию"


    Container(promotionsAndDiscountsMicroservice, "Микросервис акций и скидок", "C++", "Отвечает за управление акциями, скидками и специальными предложениями для пользователей и водителей")
    apiGateway --> promotionsAndDiscountsMicroservice : ""
    ContainerDb(promotionsAndDiscountsMicroserviceDB, "База данных микросервиса акций и скидок", "PostgreSQL", "Информация о промоакциях, кластеризованная по типам клиентов", $sprite="postgresql")
    promotionsAndDiscountsMicroservice --> promotionsAndDiscountsMicroserviceDB : "Прочитать/Записать информацию"


    Container(analyticsAndReportingMicroservice, "Микросервис аналитики и отчетности", "C++", "Отвечает за сбор и анализ данных о поездках, платежах и других ключевых метриках приложения")
    apiGateway --> analyticsAndReportingMicroservice : ""
    ContainerDb(analyticsAndReportingMicroserviceDB, "База данных микросервиса аналитики и отчетности", "Greenplum", "")
    analyticsAndReportingMicroservice --> analyticsAndReportingMicroserviceDB : "Прочитать/Записать информацию"


    Container(supportMicroservice, "Микросервис поддержки", "C++", "Отвечает за обработку обращений пользователей и водителей и предоставление поддержки по различным вопросам.")
    apiGateway --> supportMicroservice : ""
    ContainerDb(supportMicroserviceDB, "База данных микросервиса поддержки", "PostgreSQL", "Информация обо всех конфликтах, их контексте, отчетах водителей о них и их автомобилях", , $sprite="postgresql")
    supportMicroservice --> supportMicroserviceDB : "Прочитать/Записать информацию"


    Container(integrationWithPartnersMicroservice, "Микросервис интеграции с партнерами", "C++", "Отвечает за интеграцию с другими сервисами или партнерами, такими как сервисы такси или доставки еды")
    apiGateway --> integrationWithPartnersMicroservice : ""
    ContainerDb(integrationWithPartnersMicroserviceDB, "База данных микросервиса интеграции с партнерами", "PostgreSQL", "", , $sprite="postgresql")
    integrationWithPartnersMicroservice --> integrationWithPartnersMicroserviceDB : "Прочитать/Записать информацию"


    Container(fleetManagementMicroservice, "Микросервис управления автомобильным парком", "C++", "Отвечает за управление информацией о доступных автомобилях и поддержании их в хорошем состоянии")
    apiGateway --> fleetManagementMicroservice : ""
    ContainerDb(fleetManagementMicroserviceDB, "База данных микросервиса управления автомобильным парком", "PostgreSQL", "", $sprite="postgresql")
    fleetManagementMicroservice --> fleetManagementMicroserviceDB : "Прочитать/Записать информацию"


    Container(ordersMicroservice, "Микросервис заказов", "C++", "Отвечает за обработку и управление заказами пользователей и назначение водителей")
    apiGateway --> ordersMicroservice : ""
    ContainerDb(ordersMicroserviceDB, "База данных микросервиса заказов", "PostgreSQL", "", $sprite="postgresql")
    ordersMicroservice --> ordersMicroserviceDB : "Прочитать/Записать информацию"


    Container(messageBroker, "Брокер сообщений", "RabbitMQ, AMQP", "Маршрутизация сообщений от отправителя к получателю")

    Container(bankingMicroservice, "Микросервис оплаты", "C++", "Обеспечение поступления денежных средств за соверешенные поездки от клиентов к водителям")
    Container(bankingNotificationMicroservice, "Микросервис уведомления об оплате", "C++", "Уведомление участников оплаты о ее статусе")
    ContainerDb(bankingNotificationMicroserviceDb, "База данных микросервиса уведомления об оплате", "PostgreSQL" )
    bankingNotificationMicroservice --> bankingNotificationMicroserviceDb : "Прочитать/Записать информацию"


    Container(messagerMicroservice, "Микросервис обмена сообщениями", "C++", "В переписке могут принимать участие, как клиента, так и водитель и сотрудник поддержки")
    apiGateway --> messagerMicroservice

    ordersMicroservice ---> messageBroker : "Есть ли доступные машины"
    messageBroker ---> matchmakingMicroservice: "Есть ли доступные машины"
    messageBroker ---> ordersMicroservice : "Доступные машины"

    ordersMicroservice ---> messageBroker : "Выбранная машина"
    messageBroker ---> matchmakingMicroservice: "Выбрать подходящую машину"
    messageBroker ---> ordersMicroservice : "Машина выбрана"

    ordersMicroservice ---> messageBroker : "Провести платеж"
    messageBroker ---> bankingMicroservice : "Провести платеж"
    messageBroker ---> ordersMicroservice : "Платеж проведен"
    messageBroker ---> bankingNotificationMicroservice : "Уведомить о проведении платежа"

    ordersMicroservice ---> messageBroker : "Узнать стоимость поездки"
    messageBroker ---> priceConsumer
    ordersMicroservice ---> promotionsAndDiscountsMicroservice : "Узнать об акциях\n[gRPC]"
    ordersMicroservice ---> routeStopPointSelectorMicroservice : "Выбрать подходящие точки остановки\n[gRPC]"
    ordersMicroservice ---> weatherMicroservice : "Узнать погоду\n[gRPC]"

    analyticsAndReportingMicroservice --> tariffsMicroservice : "Собрать данные раз в день для выгрузки в аналитическую БД"
    analyticsAndReportingMicroservice --> supportMicroservice : "Собрать данные раз в день для выгрузки в аналитическую БД"
    analyticsAndReportingMicroservice --> ordersMicroservice : "Собрать данные раз в день для выгрузки в аналитическую БД"
    analyticsAndReportingMicroservice --> promotionsAndDiscountsMicroservice : "Собрать данные раз в день для выгрузки в аналитическую БД"
}

Container_Ext(weatherMicroserviceExt, "Внешний сервис, предоставляющий информацию о погоде")
    weatherMicroservice --> weatherMicroserviceExt : "Запросить информацию о погоде"
    weatherMicroserviceExt --> weatherMicroservice : "Вернуть информацию о погоде"

Container_Ext(navigationSystemExt, "Предоставление необходимых геоданных")
    navigationMicroservices ---> navigationSystemExt : "Отправить запрос на получение данных"
    navigationSystemExt ---> navigationMicroservices : "Получить ответ с информацией о навигации"

Container_Ext(bankingSystemExt, "Проведение банковских платежей")
bankingMicroservice --> bankingSystemExt : "Провести оплату"
bankingSystemExt --> bankingMicroservice : "Предоставить результат проведения оплаты"


SHOW_LEGEND()
@enduml
